#!/bin/sh

# VERY hacked together script just to assemble the runtime, probably will
# eventually make it cleaner, but it works for the time being

runtime='runtime.sh'

# ARCH variable sets the arch, COMP sets the compression algo
#[ -z $ARCH ] && ARCH='x86_64,aarch64'
[ -z $COMP ] && COMP='lz4'

# Currently only support LZ4 compression x86, ARMHF and AARCH64. it would be
# cool to automatically build the runtime based on the AppImage's supported
# architectures
mkdir bin
wget "https://github.com/mgord9518/portable_squashfuse/releases/download/nightly/squashfuse_ll_$COMP.x86_64" -O bin/squashfuse.x86_64
wget "https://github.com/mgord9518/portable_squashfuse/releases/download/manual/squashfuse_ll_$COMP.armv7l" -O bin/squashfuse.armhf
wget "https://github.com/mgord9518/portable_squashfuse/releases/download/manual/squashfuse_ll_$COMP.aarch64" -O bin/squashfuse.aarch64
touch bin/squashfuse.i386 bin/squashfuse.aarch64

# Sizes of all files being packed into the runtime
lx86_64=$(printf "%06d" `wc -c bin/squashfuse.x86_64 | cut -d ' ' -f 1`)
li386=$(printf "%06d" `wc -c bin/squashfuse.i386 | cut -d ' ' -f 1`)
laarch64=`wc -c bin/squashfuse.aarch64 | cut -d ' ' -f 1`
larmhf=`wc -c bin/squashfuse.armhf | cut -d ' ' -f 1`

# Offsets of squashfuse binaries by arch
# These are used when the runtime is executed to know where in the file to
# extract the appropriate binary
ox86_64=0
oi386=$(printf "%06d" $((    $ox86_64  + $lx86_64  )))
oaarch64=$(( $oi386    + $li386    ))
oarmhf=$((   $oaarch64 + $laarch64 ))

# Collapse the script to make it smaller, not really sure whether I should keep
# it or not as it also obfuscates the code and the size difference makes little
# difference as the squashfuse binaries make up an overwhelming majority of the
# size of the runtime
echo '#!/bin/sh
#.shImg.#
#flattended script to reduce size; see <github.com/mgord9518/shappimage> for src' > runtime
cat runtime.sh | sed 's:#.*::' | tr -d '\t' | grep . >> runtime

# Locations of their CASE statements
#sfs=`grep -an 'sfsLength=' "$runtime" | head -n +1 | cut -d ':' -f 1`
bin=`grep -an 'sfsOffset=' "runtime" | head -n +1 | cut -d ':' -f 1`
#script=`grep -an 'sfsOffset=' "runtime" | head -n +1 | cut -d ':' -f 1`
x86_64=`grep -an 'x86_64)' "runtime" | head -n +1 | cut -d ':' -f 1`
i386=`grep -an 'i?86)' "runtime" | head -n +1 | cut -d ':' -f 1`
aarch64=`grep -an 'aarch64)' "runtime" | head -n +1 | cut -d ':' -f 1`
armhf=`grep -an 'armhf)' "runtime" | head -n +1 | cut -d ':' -f 1`

scriptLen=$(cat runtime | wc -c | tr -dc '0-9')
scriptLen=$(($scriptLen+6))
scriptLen=$(printf "%06d" "$scriptLen")

# Add in all the sizes and offsets
sed -i "s/_x64_o/$scriptLen/" runtime
sed -i "s/_x64_l/$lx86_64/" runtime
sed -i "s/i386_o/$oi386/" runtime
sed -i "s/i386_l/$li386/" runtime
sed -i "s/ar64_o/$oaarch64/" runtime
sed -i "s/ar64_l/$laarch64/" runtime
sed -i "s/ar32_o/$oarmhf/" runtime
sed -i "s/ar32_l/$larmhf/" runtime

# Get the size of the runtime script and add 5 (as those 5 chars will be used
# to give the SquashFS offset in hex). The offset having a maximum of FFFFF
# allows it to be up to 1MiB in size, which is PLENTY for the script and
# squashfuse binaries of up to 4 or even 5 different architectures (current
# squashfuse build size is 194kB)
runLen=$(cat runtime bin/squashfuse.* | wc -c | tr -dc '0-9')
runLen="$(($runLen+6))"

# Add the script length to the correct line
echo $scriptLen
#sed -i "s/scriptLen=/scriptLen=$scriptLen/" runtime


# Add the SquashFS offset to the correct line
sfsOffset=$(printf "%06d" "$runLen")
sed -i "${bin}s/sfsOffset=/sfsOffset=$sfsOffset/" runtime

cat runtime bin/squashfuse.x86_64 bin/squashfuse.i386 bin/squashfuse.aarch64 bin/squashfuse.armhf > runtime2

rm runtime
mv runtime2 shImg_runtime-lz4
